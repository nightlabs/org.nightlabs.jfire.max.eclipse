/* *****************************************************************************
 * JFire - it's hot - Free ERP System - http://jfire.org                       *
 * Copyright (C) 2004-2005 NightLabs - http://NightLabs.org                    *
 *                                                                             *
 * This library is free software; you can redistribute it and/or               *
 * modify it under the terms of the GNU Lesser General Public                  *
 * License as published by the Free Software Foundation; either                *
 * version 2.1 of the License, or (at your option) any later version.          *
 *                                                                             *
 * This library is distributed in the hope that it will be useful,             *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of              *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU           *
 * Lesser General Public License for more details.                             *
 *                                                                             *
 * You should have received a copy of the GNU Lesser General Public            *
 * License along with this library; if not, write to the                       *
 *     Free Software Foundation, Inc.,                                         *
 *     51 Franklin St, Fifth Floor,                                            *
 *     Boston, MA  02110-1301  USA                                             *
 *                                                                             *
 * Or get it online :                                                          *
 *     http://opensource.org/licenses/lgpl-license.php                         *
 *                                                                             *
 *                                                                             *
 ******************************************************************************/

package org.nightlabs.jfire.trade.ui.transfer.wizard;

import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Set;

import javax.ejb.CreateException;
import javax.jdo.FetchPlan;
import javax.jdo.JDOHelper;
import javax.naming.NamingException;
import javax.security.auth.login.LoginException;

import org.eclipse.jface.dialogs.IMessageProvider;
import org.eclipse.jface.viewers.ISelectionChangedListener;
import org.eclipse.jface.viewers.SelectionChangedEvent;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Label;
import org.nightlabs.base.ui.composite.XComposite;
import org.nightlabs.base.ui.composite.XComposite.LayoutMode;
import org.nightlabs.base.ui.resource.SharedImages;
import org.nightlabs.base.ui.resource.SharedImages.ImageDimension;
import org.nightlabs.base.ui.wizard.IWizardHopPage;
import org.nightlabs.base.ui.wizard.WizardHopPage;
import org.nightlabs.config.Config;
import org.nightlabs.jdo.NLJDOHelper;
import org.nightlabs.jfire.base.ui.login.Login;
import org.nightlabs.jfire.store.ProductType;
import org.nightlabs.jfire.store.StoreManager;
import org.nightlabs.jfire.store.StoreManagerUtil;
import org.nightlabs.jfire.store.deliver.CheckRequirementsEnvironment;
import org.nightlabs.jfire.store.deliver.Delivery;
import org.nightlabs.jfire.store.deliver.DeliveryData;
import org.nightlabs.jfire.store.deliver.ModeOfDeliveryFlavour;
import org.nightlabs.jfire.store.deliver.ServerDeliveryProcessor;
import org.nightlabs.jfire.store.deliver.ServerDeliveryProcessorName;
import org.nightlabs.jfire.store.deliver.id.ModeOfDeliveryFlavourID;
import org.nightlabs.jfire.store.deliver.id.ServerDeliveryProcessorID;
import org.nightlabs.jfire.trade.ui.TradePlugin;
import org.nightlabs.jfire.trade.ui.resource.Messages;
import org.nightlabs.jfire.trade.ui.transfer.deliver.ClientDeliveryProcessor;
import org.nightlabs.jfire.trade.ui.transfer.deliver.ClientDeliveryProcessorFactory;
import org.nightlabs.jfire.trade.ui.transfer.deliver.ClientDeliveryProcessorFactoryRegistry;
import org.nightlabs.util.Util;

/**
 * There's one of these pages for each group of
 * {@link org.nightlabs.jfire.store.ProductType}s with the same
 * {@link org.nightlabs.jfire.store.deliver.ModeOfDelivery}s/{@link org.nightlabs.jfire.store.deliver.ModeOfDeliveryFlavour}s
 * configured. The dynamic pages generated by the
 * {@link org.nightlabs.jfire.trade.ui.transfer.deliver.ClientDeliveryProcessor}s are appended
 * after all the entry pages.
 *
 * @author Marco Schulze - marco at nightlabs dot de
 */
public class DeliveryEntryPage
extends WizardHopPage
implements IDeliveryEntryPage
{
	private List productTypes;
	private org.eclipse.swt.widgets.List productTypeGUIList;

	private List articles;

	private List<ModeOfDeliveryFlavour> modeOfDeliveryFlavours;
//	private org.eclipse.swt.widgets.List modeOfDeliveryFlavourGUIList;
	private ModeOfDeliveryFlavourTable modeOfDeliveryFlavourTable;
	
	private Label clientDeliveryProcessorFactoryLabel;
	/**
	 * Contains items of type {@link ClientDeliveryProcessorFactory}.
	 */
	private List clientDeliveryProcessorFactoryList = null;
	private Combo clientDeliveryProcessorFactoryCombo;

	private Label serverDeliveryProcessorLabel;
	/**
	 * Contains items of type {@link ServerDeliveryProcessor}.
	 */
	private List serverDeliveryProcessorList = new ArrayList();
	private Combo serverDeliveryProcessorCombo;

	public class Test {
		
	}
	private ModeOfDeliveryFlavour selectedModeOfDeliveryFlavour = null;
	private ClientDeliveryProcessorFactory selectedClientDeliveryProcessorFactory = null;
	private ClientDeliveryProcessor clientDeliveryProcessor = null;
	private ServerDeliveryProcessor selectedServerDeliveryProcessor = null;
	
//	private DeliveryWizardHop wizardHop;
	protected DeliveryWizardHop getDeliveryWizardHop()
	{
		return (DeliveryWizardHop) getWizardHop();
	}

	public DeliveryEntryPage(Delivery delivery,
			List productTypes,
			List articles, List modeOfDeliveryFlavours)
	{
		super(DeliveryEntryPage.class.getName() + '/' + delivery.getDeliveryID(), Messages.getString("org.nightlabs.jfire.trade.ui.transfer.wizard.DeliveryEntryPage.title"), //$NON-NLS-1$
				SharedImages.getSharedImageDescriptor(TradePlugin.getDefault(), DeliveryEntryPage.class, null, ImageDimension._75x70));
		setMessage(null);
		setDescription(
				Messages.getString("org.nightlabs.jfire.trade.ui.transfer.wizard.DeliveryEntryPage.description")); //$NON-NLS-1$

		new DeliveryWizardHop(this, delivery); // self-registering

		this.productTypes = productTypes;
		this.modeOfDeliveryFlavours = modeOfDeliveryFlavours;

		Collections.sort(modeOfDeliveryFlavours, new Comparator() {
			public int compare(Object obj0, Object obj1)
			{
				ModeOfDeliveryFlavour mopf0 = (ModeOfDeliveryFlavour)obj0;
				ModeOfDeliveryFlavour mopf1 = (ModeOfDeliveryFlavour)obj1;
				String name0 = mopf0.getName().getText(Locale.getDefault().getLanguage());
				String name1 = mopf1.getName().getText(Locale.getDefault().getLanguage());
				return name0.compareTo(name1);
			}
		});
	}
	
//	public DeliveryEntryPage(List<Delivery> deliveryList, List<ProductType> productTypes, List<Article> articles, List<ModeOfDeliveryFlavour> modFlavours) {
//		super(DeliveryEntryPage.class.getName() + '/' + deliveryList.get(0).getDeliveryID(), Messages.getString("org.nightlabs.jfire.trade.ui.transfer.wizard.DeliveryEntryPage.title"), //$NON-NLS-1$
//				SharedImages.getSharedImageDescriptor(TradePlugin.getDefault(), DeliveryEntryPage.class, null, ImageDimension._75x70));
//
//		setMessage(null);
//		setDescription(
//				Messages.getString("org.nightlabs.jfire.trade.ui.transfer.wizard.DeliveryEntryPage.description")); //$NON-NLS-1$
//
//		new DeliveryWizardHop(this, deliveryList); // self-registering
//
//		this.productTypes = productTypes;
//		this.modeOfDeliveryFlavours = modFlavours;
//
//		Collections.sort(modeOfDeliveryFlavours, new Comparator<ModeOfDeliveryFlavour>() {
//			public int compare(ModeOfDeliveryFlavour o1, ModeOfDeliveryFlavour o2) {
//				String name1 = o1.getName().getText(Locale.getDefault().getLanguage());
//				String name2 = o2.getName().getText(Locale.getDefault().getLanguage());
//				return name1.compareTo(name2);
//			}
//		});		
//	}

	/**
	 * @see org.nightlabs.base.ui.wizard.DynamicPathWizardPage#createPageContents(org.eclipse.swt.widgets.Composite)
	 */
	public Control createPageContents(Composite parent)
	{
//	 TODO remove test stuff
//		getWizardHop().addHopPage(new TestWizardPage1("test1", "Delivery - Test1", "This is step 1 of delivery"));
//		getWizardHop().addHopPage(new TestWizardPage1("test2", "Delivery - Test2", "This is step 2 of delivery"));
// end test
		
		XComposite page = new XComposite(parent, SWT.NONE, LayoutMode.TIGHT_WRAPPER);

		new Label(page, SWT.NONE).setText(Messages.getString("org.nightlabs.jfire.trade.ui.transfer.wizard.DeliveryEntryPage.productTypesLabel.text")); //$NON-NLS-1$
		productTypeGUIList = new org.eclipse.swt.widgets.List(page, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL);
		productTypeGUIList.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
		for (Iterator it = productTypes.iterator(); it.hasNext(); ) {
			ProductType productType = (ProductType) it.next();
			productTypeGUIList.add(productType.getName().getText(Locale.getDefault().getLanguage()));
		}

		XComposite spacer = new XComposite(page, SWT.NONE, LayoutMode.TIGHT_WRAPPER);
		spacer.getGridData().grabExcessVerticalSpace = false;
		spacer.getGridData().heightHint = 4;

		new Label(page, SWT.NONE).setText(Messages.getString("org.nightlabs.jfire.trade.ui.transfer.wizard.DeliveryEntryPage.modeOfDeliveryFlavourLabel.text")); //$NON-NLS-1$
		modeOfDeliveryFlavourTable = new ModeOfDeliveryFlavourTable(page);
		modeOfDeliveryFlavourTable.setInput(modeOfDeliveryFlavours);

//		modeOfDeliveryFlavourGUIList = new org.eclipse.swt.widgets.List(page, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL);
//		modeOfDeliveryFlavourGUIList.setLayoutData(new GridData(GridData.FILL_BOTH));
//		for (Iterator it = modeOfDeliveryFlavours.iterator(); it.hasNext(); ) {
//			ModeOfDeliveryFlavour modeOfDeliveryFlavour = (ModeOfDeliveryFlavour) it.next();
//			modeOfDeliveryFlavourGUIList.add(modeOfDeliveryFlavour.getName().getText(Locale.getDefault().getLanguage()));
//		}

		modeOfDeliveryFlavourTable.getTableViewer().addSelectionChangedListener(new ISelectionChangedListener() {
			public void selectionChanged(SelectionChangedEvent arg0)
			{
				try {
					setMessage(null);
					modeOfDeliveryFlavourGUIListSelectionChanged();
				} catch (Exception x) {
					throw new RuntimeException(x);
				}
			}
		});
//		modeOfDeliveryFlavourGUIList.addSelectionListener(new SelectionAdapter() {
//			public void widgetSelected(SelectionEvent e)
//			{
//				try {
//					setMessage(null);
//					modeOfDeliveryFlavourGUIListSelectionChanged();
//				} catch (Exception x) {
//					throw new RuntimeException(x);
//				}
//			}
//		});

//		if (modeOfDeliveryFlavourGUIList.getItemCount() > 0)
//			modeOfDeliveryFlavourGUIList.select(0);

		spacer = new XComposite(page, SWT.NONE, LayoutMode.TIGHT_WRAPPER);
		spacer.getGridData().grabExcessVerticalSpace = false;
		spacer.getGridData().heightHint = 4;
		(clientDeliveryProcessorFactoryLabel = new Label(page, SWT.NONE)).setText(Messages.getString("org.nightlabs.jfire.trade.ui.transfer.wizard.DeliveryEntryPage.clientDeliveryProcessorFactoryLabel.text")); //$NON-NLS-1$
		clientDeliveryProcessorFactoryCombo = new Combo(page, SWT.BORDER | SWT.READ_ONLY);
		clientDeliveryProcessorFactoryCombo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));

		clientDeliveryProcessorFactoryCombo.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent e)
			{
				try {
					setMessage(null);
					clientDeliveryProcessorFactoryComboSelectionChanged();
				} catch (Exception x) {
					throw new RuntimeException(x);
				}
			}
		});

		spacer = new XComposite(page, SWT.NONE, LayoutMode.TIGHT_WRAPPER);
		spacer.getGridData().grabExcessVerticalSpace = false;
		spacer.getGridData().heightHint = 4;
		(serverDeliveryProcessorLabel = new Label(page, SWT.NONE)).setText(Messages.getString("org.nightlabs.jfire.trade.ui.transfer.wizard.DeliveryEntryPage.serverDeliveryProcessorLabel.text")); //$NON-NLS-1$
		serverDeliveryProcessorCombo = new Combo(page, SWT.BORDER | SWT.READ_ONLY);
		serverDeliveryProcessorCombo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));

		serverDeliveryProcessorCombo.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent e)
			{
				try {
					setMessage(null);
					serverDeliveryProcessorComboSelectionChanged();
				} catch (Exception x) {
					throw new RuntimeException(x);
				}
			}
		});

		modeOfDeliveryFlavourTable.setInput(modeOfDeliveryFlavours);
		DeliveryEntryPageCfMod paymentEntryPageCfMod = getDeliveryEntryPageCfMod();
		final List<ModeOfDeliveryFlavour> selList = new ArrayList<ModeOfDeliveryFlavour>(1);
		for (ModeOfDeliveryFlavour modeOfDeliveryFlavour : modeOfDeliveryFlavours) {
			if (Util.equals(paymentEntryPageCfMod.getModeOfDeliveryFlavourPK(), modeOfDeliveryFlavour.getPrimaryKey())) {
				selList.add(modeOfDeliveryFlavour);
				break;
			}
		}
//		modeOfDeliveryFlavourTable.setSelectedElements(selList);

		Display.getDefault().asyncExec(new Runnable() {
			public void run()
			{
				modeOfDeliveryFlavourTable.setSelectedElements(selList); // JFace changed its behaviour?!!?!?! It now fires an event when programmatically setting a selection.
//				try {
//					setMessage(null);
//					modeOfDeliveryFlavourGUIListSelectionChanged();
//				} catch (Exception e) {
//					throw new RuntimeException(e);
//				}
			}
		});

		return page;
	}
	
	protected static String sessionLastSelectedMOPFPK = null;
	
	private StoreManager storeManager = null;

	protected StoreManager getStoreManager()
		throws RemoteException, LoginException, CreateException, NamingException
	{
		if (storeManager == null)
			storeManager = StoreManagerUtil.getHome(Login.getLogin().getInitialContextProperties()).create();

		return storeManager;
	}

	protected DeliveryEntryPageCfMod getDeliveryEntryPageCfMod()
	{
		return (DeliveryEntryPageCfMod) Config.sharedInstance().createConfigModule(DeliveryEntryPageCfMod.class);
	}

	protected void modeOfDeliveryFlavourGUIListSelectionChanged() throws Exception
	{
		setErrorMessage(null);
//		DeliveryWizard wizard = ((DeliveryWizard)getWizard());

		// remove all ClientDeliveryProcessorFactory s as they will be fetched again
		clientDeliveryProcessorFactoryCombo.removeAll();
		clientDeliveryProcessorFactoryList = null; // will be replaced

		// remove all ServerDeliveryProcessor s as they will be fetched again
		serverDeliveryProcessorCombo.removeAll();
		serverDeliveryProcessorList.clear();

		selectedModeOfDeliveryFlavour = null;
		sessionLastSelectedMOPFPK = null;
		clientDeliveryProcessor = null;

		// set selectedModeOfDeliveryFlavour
		selectedModeOfDeliveryFlavour = modeOfDeliveryFlavourTable.getSelectedModeOfDeliveryFlavour();
//		int idx = modeOfDeliveryFlavourGUIList.getSelectionIndex();
//		if (idx >= 0) {
		if (selectedModeOfDeliveryFlavour != null) {
//			selectedModeOfDeliveryFlavour = (ModeOfDeliveryFlavour) modeOfDeliveryFlavours.get(idx);
			getDeliveryEntryPageCfMod().setModeOfDeliveryFlavourPK(selectedModeOfDeliveryFlavour.getPrimaryKey());

			clientDeliveryProcessorFactoryList =
					ClientDeliveryProcessorFactoryRegistry.sharedInstance().
							getClientDeliveryProcessorFactories(selectedModeOfDeliveryFlavour);

			Collections.sort(clientDeliveryProcessorFactoryList, new Comparator(){
				public int compare(Object obj0, Object obj1)
				{
					ClientDeliveryProcessorFactory cppf0 = (ClientDeliveryProcessorFactory)obj0;
					ClientDeliveryProcessorFactory cppf1 = (ClientDeliveryProcessorFactory)obj1;
					String name0 = cppf0.getName();
					String name1 = cppf1.getName();
					return name0.compareTo(name1);
				}
			});

			for (Iterator it = clientDeliveryProcessorFactoryList.iterator(); it.hasNext(); ) {
				ClientDeliveryProcessorFactory cppf = (ClientDeliveryProcessorFactory) it.next();
				clientDeliveryProcessorFactoryCombo.add(cppf.getName());
			}

			if (clientDeliveryProcessorFactoryCombo.getItemCount() > 0)
				clientDeliveryProcessorFactoryCombo.select(0);
			else
				setMessage(String.format(
						Messages.getString("org.nightlabs.jfire.trade.ui.transfer.wizard.DeliveryEntryPage.errorNoClientDeliveryProcessorFactoryRegisteredForSelectedModeOfDeliveryFlavour"), //$NON-NLS-1$
						selectedModeOfDeliveryFlavour.getPrimaryKey(),
						selectedModeOfDeliveryFlavour.getName().getText()), IMessageProvider.ERROR);

		} // if (selectedModeOfDeliveryFlavour != null) {

		clientDeliveryProcessorFactoryComboSelectionChanged();
		getContainer().updateButtons();
	}

	protected void clientDeliveryProcessorFactoryComboSelectionChanged() throws Exception
	{
		DeliveryWizard wizard = ((DeliveryWizard)getWizard());
	
		removeDeliveryPages();
//		wizard.removeAllDynamicWizardPages();
		
		selectedClientDeliveryProcessorFactory = null;
		clientDeliveryProcessor = null;
		serverDeliveryProcessorCombo.removeAll();
		serverDeliveryProcessorList.clear();

		int idx = clientDeliveryProcessorFactoryCombo.getSelectionIndex();
		if (idx >= 0) {
			selectedClientDeliveryProcessorFactory = (ClientDeliveryProcessorFactory) clientDeliveryProcessorFactoryList.get(idx);

			clientDeliveryProcessor = selectedClientDeliveryProcessorFactory.createClientDeliveryProcessor();
			if (clientDeliveryProcessor == null)
				throw new IllegalStateException("ClientDeliveryProcessorFactory.createClientDeliveryProcessor() returned null! class: " + selectedClientDeliveryProcessorFactory.getClass()); //$NON-NLS-1$
			clientDeliveryProcessor.setClientDeliveryProcessorFactory(selectedClientDeliveryProcessorFactory);
			clientDeliveryProcessor.setDeliveryEntryPage(this);
			clientDeliveryProcessor.setCustomerID(wizard.getPartnerID());
			clientDeliveryProcessor.setDelivery(getDeliveryWizardHop().getDelivery());
			clientDeliveryProcessor.init();

			String reqMsg = clientDeliveryProcessor.getRequirementCheckKey();
			if (reqMsg != null) {				
				this.setErrorMessage(reqMsg.trim()); // TODO we need l10n!
				return;
			}

			this.setErrorMessage(null);

			DeliveryData deliveryData = clientDeliveryProcessor.getDeliveryData();
			if (deliveryData == null)
				deliveryData = new DeliveryData(getDeliveryWizardHop().getDelivery());
			deliveryData.getDelivery().setModeOfDeliveryFlavour(selectedModeOfDeliveryFlavour);
			deliveryData.getDelivery().setClientDeliveryProcessorFactoryID(
					selectedClientDeliveryProcessorFactory.getID());
			getDeliveryWizardHop().setDeliveryData(deliveryData);

			Set includedSPPs = clientDeliveryProcessor.getIncludedServerDeliveryProcessorIDs();
			Set excludedSPPs = null;
			if (includedSPPs == null)
				excludedSPPs = clientDeliveryProcessor.getExcludedServerDeliveryProcessorIDs();

			IWizardHopPage paymentPage = clientDeliveryProcessor.createDeliveryWizardPage();
			if (paymentPage != null)
				addDeliveryPage(paymentPage);

			CheckRequirementsEnvironment checkRequirementsEnvironment = new CheckRequirementsEnvironment(
					getDeliveryWizardHop().getDelivery().getDeliveryDirection(),
					getDeliveryWizardHop().getDelivery().getArticleIDs());

			// load ServerDeliveryProcessor s
			ModeOfDeliveryFlavourID modeOfDeliveryFlavourID = (ModeOfDeliveryFlavourID) JDOHelper.getObjectId(selectedModeOfDeliveryFlavour);
			Collection c = getStoreManager().getServerDeliveryProcessorsForOneModeOfDeliveryFlavour(
					modeOfDeliveryFlavourID,
					checkRequirementsEnvironment,
					new String[] {
							FetchPlan.DEFAULT,
							ServerDeliveryProcessor.FETCH_GROUP_NAME,
							ServerDeliveryProcessorName.FETCH_GROUP_NAMES
					}, NLJDOHelper.MAX_FETCH_DEPTH_NO_LIMIT);

			String clientDeliveryProcessorFactoryID = selectedClientDeliveryProcessorFactory.getID();
			for (Iterator it = c.iterator(); it.hasNext(); ) {
				ServerDeliveryProcessor spp = (ServerDeliveryProcessor) it.next();
				ServerDeliveryProcessorID sppID = (ServerDeliveryProcessorID) JDOHelper.getObjectId(spp);

				if (includedSPPs != null && !includedSPPs.contains(sppID))
						continue;

				if (excludedSPPs != null && excludedSPPs.contains(sppID))
					continue;

				Set includedCPPFs = spp.getIncludedClientDeliveryProcessorFactoryIDs();
				Set excludedCPPFs = null;
				if (includedCPPFs == null)
					excludedCPPFs = spp.getExcludedClientDeliveryProcessorFactoryIDs();

				if (includedCPPFs != null && !includedCPPFs.contains(clientDeliveryProcessorFactoryID))
					continue;

				if (excludedCPPFs != null && excludedCPPFs.contains(clientDeliveryProcessorFactoryID))
					continue;

				serverDeliveryProcessorList.add(spp);
			}

			Collections.sort(serverDeliveryProcessorList, new Comparator(){
				public int compare(Object obj0, Object obj1)
				{
					ServerDeliveryProcessor spp0 = (ServerDeliveryProcessor)obj0;
					ServerDeliveryProcessor spp1 = (ServerDeliveryProcessor)obj1;
					String name0 = spp0.getName().getText(Locale.getDefault().getLanguage());
					String name1 = spp1.getName().getText(Locale.getDefault().getLanguage());
					return name0.compareTo(name1);
				}
			});

			for (Iterator it = serverDeliveryProcessorList.iterator(); it.hasNext(); ) {
				ServerDeliveryProcessor serverDeliveryProcessor = (ServerDeliveryProcessor)it.next();
				serverDeliveryProcessorCombo.add(serverDeliveryProcessor.getName().getText(Locale.getDefault().getLanguage()));
			}

			if (serverDeliveryProcessorCombo.getItemCount() > 0)
				serverDeliveryProcessorCombo.select(0);
			else
				setMessage(String.format(
						Messages.getString("org.nightlabs.jfire.trade.ui.transfer.wizard.DeliveryEntryPage.errorNoServerDeliveryProcessorRegisteredForSelectedModeOfDeliveryFlavour"), //$NON-NLS-1$
						selectedModeOfDeliveryFlavour.getPrimaryKey(),
						selectedModeOfDeliveryFlavour.getName().getText()), IMessageProvider.ERROR);
		}

		serverDeliveryProcessorComboSelectionChanged();
	}

	protected void removeDeliveryPages()
	{
		getWizardHop().removeAllHopPages();
	}

	protected void addDeliveryPage(IWizardHopPage deliveryPage)
	{
//		((IDynamicPathWizard)getWizard()).addDynamicWizardPage(paymentPage);
//		paymentPage.setWizard(getWizard());
		getWizardHop().addHopPage(deliveryPage);
	}

	protected void serverDeliveryProcessorComboSelectionChanged()
	{
		DeliveryWizard wizard = ((DeliveryWizard)getWizard());

		selectedServerDeliveryProcessor = null;

		int idx = serverDeliveryProcessorCombo.getSelectionIndex();
		if (idx >= 0) {
			selectedServerDeliveryProcessor = (ServerDeliveryProcessor) serverDeliveryProcessorList.get(idx);
			getDeliveryWizardHop().getDelivery().setServerDeliveryProcessorID(
					(ServerDeliveryProcessorID) JDOHelper.getObjectId(selectedServerDeliveryProcessor));

			String reqMsg = selectedServerDeliveryProcessor.getRequirementCheckKey();
			if (reqMsg != null) {				
				this.setErrorMessage(reqMsg.trim()); // TODO we need l10n!
//				wizard.updateDialog(); // this is already done be setErrorMessage(...)
				return;
			}

			this.setErrorMessage(null);
		}
		else
			getDeliveryWizardHop().getDelivery().setServerDeliveryProcessorID(null);

		wizard.updateDialog();
	}

	/**
	 * @return Returns the selectedModeOfDeliveryFlavour.
	 */
	public ModeOfDeliveryFlavour getSelectedModeOfDeliveryFlavour()
	{
		return selectedModeOfDeliveryFlavour;
	}

	/**
	 * @return Returns the clientDeliveryProcessor.
	 */
	public ClientDeliveryProcessor getClientDeliveryProcessor()
	{
		return clientDeliveryProcessor;
	}
	/**
	 * @return Returns the selectedClientDeliveryProcessorFactory.
	 */
	public ClientDeliveryProcessorFactory getSelectedClientDeliveryProcessorFactory()
	{
		return selectedClientDeliveryProcessorFactory;
	}
	/**
	 * @return Returns the selectedServerDeliveryProcessor.
	 */
	public ServerDeliveryProcessor getSelectedServerDeliveryProcessor()
	{
		return selectedServerDeliveryProcessor;
	}

	/*
	 * (non-Javadoc)
	 * @see org.eclipse.jface.wizard.WizardPage#isPageComplete()
	 */
	public boolean isPageComplete()
	{
		return
				clientDeliveryProcessor != null &&
				clientDeliveryProcessor.getRequirementCheckKey() == null &&
				selectedClientDeliveryProcessorFactory != null &&
				selectedServerDeliveryProcessor != null &&
				selectedServerDeliveryProcessor.getRequirementCheckKey() == null;
	}

//	protected void modeOfDeliveryFlavourGUIListSelectionChanged()
//	{
//		DeliveryWizard wizard = ((DeliveryWizard)getWizard());
//		
////	 remove all ClientPaymentProcessorFactory s as they will be fetched again
//		clientDeliveryProcessorFactoryCombo.removeAll();
//		clientDeliveryProcessorFactoryList = null; // will be replaced
//		clientDeliveryProcessor = null;
//
//		// remove all ServerPaymentProcessor s as they will be fetched again
//		serverDeliveryProcessorCombo.removeAll();
//		serverDeliveryProcessorList.clear();
//		selectedClientDeliveryProcessorFactory = null;
//
//		int idx = clientDeliveryProcessorFactoryCombo.getSelectionIndex();
//		if (idx >= 0) {
//			selectedClientDeliveryProcessorFactory = (ClientDeliveryProcessorFactory) clientDeliveryProcessorFactoryList.get(idx);
//
//			clientDeliveryProcessor = selectedClientDeliveryProcessorFactory.createClientDeliveryProcessor();
//			clientDeliveryProcessor.setClientDeliveryProcessorFactory(selectedClientDeliveryProcessorFactory);
//			clientDeliveryProcessor.setCustomerID(wizard.getCustomerID());
//			clientDeliveryProcessor.setDelivery(delivery);
//			clientDeliveryProcessor.init();
//
//			wizard.addDeliveryData(clientDeliveryProcessor.getDeliveryData());
//
//			Set includedSPPs = clientDeliveryProcessor.getIncludedServerDeliveryProcessorIDs();
//			Set excludedSPPs = null;
//			if (includedSPPs == null)
//				excludedSPPs = clientDeliveryProcessor.getExcludedServerDeliveryProcessorIDs();
//
//			IWizardHopPage deliveryPage = clientDeliveryProcessor.createDeliveryWizardPage();
//// TODO			if (deliveryPage != null)
//// TODO				wizard.addDynamicWizardPage(deliveryPage);
//
//			// load ServerDeliveryProcessor s
//			ModeOfDeliveryFlavourID modeOfDeliveryFlavourID = (ModeOfDeliveryFlavourID) JDOHelper.getObjectId(selectedModeOfDeliveryFlavour);
////			Collection c = getStoreManager().getServerDeliveryProcessorsForOneModeOfDeliveryFlavour(
////					modeOfDeliveryFlavourID,
////					new String[] {
////							FetchPlan.DEFAULT,
////							FetchPlan.VALUES,
////							ServerDeliveryProcessor.FETCH_GROUP_NAME,
////							ServerDeliveryProcessorName.FETCH_GROUP_NAMES
////					});
//			Collection c = null;
//
//			String clientDeliveryProcessorFactoryID = selectedClientDeliveryProcessorFactory.getID();
//			for (Iterator it = c.iterator(); it.hasNext(); ) {
//				ServerDeliveryProcessor spp = (ServerDeliveryProcessor) it.next();
//				ServerDeliveryProcessorID sppID = (ServerDeliveryProcessorID) JDOHelper.getObjectId(spp);
//
//				if (includedSPPs != null && !includedSPPs.contains(sppID))
//						continue;
//
//				if (excludedSPPs != null && excludedSPPs.contains(sppID))
//					continue;
//
//				Set includedCPPFs = spp.getIncludedClientDeliveryProcessorFactoryIDs();
//				Set excludedCPPFs = null;
//				if (includedCPPFs == null)
//					excludedCPPFs = spp.getExcludedClientDeliveryProcessorFactoryIDs();
//
//				if (includedCPPFs != null && !includedCPPFs.contains(clientDeliveryProcessorFactoryID))
//					continue;
//
//				if (excludedCPPFs != null && excludedCPPFs.contains(clientDeliveryProcessorFactoryID))
//					continue;
//
//				serverDeliveryProcessorList.add(spp);
//			}
//
//			Collections.sort(serverDeliveryProcessorList, new Comparator(){
//				public int compare(Object obj0, Object obj1)
//				{
//					ServerDeliveryProcessor spp0 = (ServerDeliveryProcessor)obj0;
//					ServerDeliveryProcessor spp1 = (ServerDeliveryProcessor)obj1;
//					String name0 = spp0.getName().getText(Locale.getDefault().getLanguage());
//					String name1 = spp1.getName().getText(Locale.getDefault().getLanguage());
//					return name0.compareTo(name1);
//				}
//			});
//
//			for (Iterator it = serverDeliveryProcessorList.iterator(); it.hasNext(); ) {
//				ServerDeliveryProcessor serverDeliveryProcessor = (ServerDeliveryProcessor)it.next();
//				serverDeliveryProcessorCombo.add(serverDeliveryProcessor.getName().getText(Locale.getDefault().getLanguage()));
//			}
//
//			if (serverDeliveryProcessorCombo.getItemCount() > 0)
//				serverDeliveryProcessorCombo.select(0);
//			else
//				setMessage("No ServerDeliveryProcessor registered for the selected ModeOfDeliveryFlavour!", IMessageProvider.ERROR);
//		}
//
//		serverDeliveryProcessorComboSelectionChanged();
//	}

}
